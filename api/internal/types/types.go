// Code generated by goctl. DO NOT EDIT.
package types

type LoginReq struct {
	Email    string `json:"email" validate:"required,email"`
	Password string `json:"password" validate:"required"`
}

type LoginResp struct {
	Token string `json:"token"`
}

type LoginOutResp struct {
	Success bool `json:"success"`
}

type RegisterReq struct {
	Email     string `json:"email" validate:"required,email"`
	Password  string `json:"password" validate:"required,min=8,max=20"`
	FirstName string `json:"first_name" validate:"required"`
	LastName  string `json:"last_name" validate:"required"`
	Country   string `json:"country" validate:"required,iso3166_1_alpha3"`
	Address   string `json:"address" validate:"required"`
	AffBy     int64  `json:"aff_by"`
}

type RegisterResp struct {
	Token string `json:"token"`
}

type VMGroup struct {
	Id     int64  `json:"group_id"`
	Name   string `json:"group_name"`
	Region string `json:"region"`
}

type GetAllVMGroupsResp struct {
	Groups []VMGroup `json:"groups"`
}

type GetVMGroupByRegionReq struct {
	Region string `path:"region" validate:"required"`
}

type GetVMGroupByRegionResp struct {
	Groups []VMGroup `json:"groups"`
}

type VMPlan struct {
	Id                int64  `json:"id"`
	Name              string `json:"name"`
	Stock             int64  `json:"stock"`
	Vcpu              int64  `json:"vcpu"`
	Memory            int64  `json:"memory"`
	Disk              int64  `json:"disk"`
	DataTransfer      int64  `json:"data_transfer"`
	Bandwidth         int64  `json:"bandwidth"`
	Ipv4Num           int64  `json:"ipv4_num"`
	Ipv6Num           int64  `json:"ipv6_num"`
	MonthlyPrice      int64  `json:"monthly_price"`
	QuarterlyPrice    int64  `json:"quarterly_price"`
	SemiAnnuallyPrice int64  `json:"semi_annually_price"`
	AnnuallyPrice     int64  `json:"annually_price"`
}

type GetVMPlanByGroupIdReq struct {
	GroupId int64 `path:"group_id" validate:"required"`
}

type GetVMPlanByGroupIdResp struct {
	Plans []VMPlan `json:"plans"`
}

type VMImage struct {
	Id      int64  `json:"id"`
	Name    string `json:"name"`
	Release string `json:"release"`
}

type GetImageResp struct {
	Images []VMImage `json:"images"`
}

type DeployVMInstanceReq struct {
	KeyId        int64  `json:"key_id" validate:"required,number"`
	HostName     string `json:"host_name" validate:"required,hostname"`
	BillingCycle string `json:"billing_cycle" validate:"required,oneof=monthly quarterly semiAnnually annually"`
	Image        string `json:"image"`
	GroupId      int64  `json:"group_id" validate:"required,number"`
	PlanID       int64  `json:"plan_id" validate:"required,number"`
}

type DeployVMInstanceResp struct {
	OrderNo string `json:"order_no"`
}

type GetOrderDetailItem struct {
	Id       int64  `json:"id"`
	OrderId  int64  `json:"orderId"`
	Name     string `json:"name"`
	Content  string `json:"content"`
	Quantity int64  `json:"quantity"`
	Amount   int64  `json:"amount"`
}

type OrderPaymentMethod struct {
	Name string `json:"name"`
	Type string `json:"type"`
}

type GetOrderDetailReq struct {
	OrderNo string `path:"orderNo" validate:"required"`
}

type GetOrderDetailResp struct {
	Id          int64                `json:"id"`
	CreateTime  string               `json:"createTime"`
	UpdateTime  string               `json:"updateTime"`
	DueDate     string               `json:"dueDate"`
	OrderNo     string               `json:"orderNo"`
	UserId      int64                `json:"userId"`
	TotalAmount int64                `json:"totalAmount"`
	Status      string               `json:"status"`
	Items       []GetOrderDetailItem `json:"items"`
}

type PayOrderReq struct {
	OrderNo string `path:"orderNo" validate:"required"`
	Method  string `json:"method" validate:"required"`
}

type PayOrderResp struct {
	Url string `json:"url"`
}

type GetOrderPaymentMethodReq struct {
	OrderNo string `path:"orderNo" validate:"required"`
}

type GetOrderPaymentMethodResp struct {
	Methods []OrderPaymentMethod `json:"methods"`
}

type EventData struct {
	Object             map[string]interface{} `json:"-"`
	PreviousAttributes map[string]interface{} `json:"previous_attributes"`
	Raw                []byte                 `json:"object"`
}

type EventRequest struct {
	ID             string `json:"id"`
	IdempotencyKey string `json:"idempotency_key"`
}

type StripeEventObject struct {
	Account         string        `json:"account, optional"`
	APIVersion      string        `json:"api_version"`
	Created         int64         `json:"created"`
	Data            *EventData    `json:"data"`
	ID              string        `json:"id"`
	Livemode        bool          `json:"livemode"`
	Object          string        `json:"object"`
	PendingWebhooks int64         `json:"pending_webhooks"`
	Request         *EventRequest `json:"request"`
	Type            string        `json:"type"`
}

type StripeCheckoutWebhookReq struct {
	UniquePath      string `path:"uniquePath" validate:"required"`
	StripeSignature string `header:"Stripe-Signature"`
}

type StripeCheckoutWebhookResp struct {
	Msg string `json:"msg"`
}

type SSHKey struct {
	Id        int64  `json:"id"`
	Name      string `json:"name"`
	PublicKey string `json:"public_key"`
	CreateAt  string `json:"create_at"`
}

type AddSSHKeyReq struct {
	Name      string `json:"name" validate:"required,min=1,max=10"`
	PublicKey string `json:"public_key" validate:"required"`
}

type AddSSHKeyResp struct {
	SSHKey SSHKey `json:"ssh_key"`
}

type DeleteSSHKeyReq struct {
	KeyId string `path:"keyId" validate:"required"`
}

type DeleteSSHKeyResp struct {
	Msg string `json:"msg"`
}

type GetSSHKeyReq struct {
	KeyId string `path:"keyId" validate:"required"`
}

type GetSSHKeyResp struct {
	SSHKey SSHKey `json:"ssh_key"`
}

type GetUserSSHKeysReq struct {
	UserId string `path:"userId" validate:"required"`
}

type GetUserSSHKeysResp struct {
	SSHKeys []SSHKey `json:"ssh_keys"`
}
