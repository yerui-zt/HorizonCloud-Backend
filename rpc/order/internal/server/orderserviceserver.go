// Code generated by goctl. DO NOT EDIT.
// Source: order.proto

package server

import (
	"context"

	"HorizonX/rpc/order/internal/logic"
	"HorizonX/rpc/order/internal/svc"
	"HorizonX/rpc/order/order"
)

type OrderServiceServer struct {
	svcCtx *svc.ServiceContext
	order.UnimplementedOrderServiceServer
}

func NewOrderServiceServer(svcCtx *svc.ServiceContext) *OrderServiceServer {
	return &OrderServiceServer{
		svcCtx: svcCtx,
	}
}

// 创建虚拟机部署订单
func (s *OrderServiceServer) CreateVMDeployOrder(ctx context.Context, in *order.CreateVMDeployOrderReq) (*order.CreateVMDeployOrderResp, error) {
	l := logic.NewCreateVMDeployOrderLogic(ctx, s.svcCtx)
	return l.CreateVMDeployOrder(in)
}

// 获取订单详情
func (s *OrderServiceServer) GetOrderDetailItem(ctx context.Context, in *order.GetOrderDetailItemReq) (*order.GetOrderDetailItemResp, error) {
	l := logic.NewGetOrderDetailItemLogic(ctx, s.svcCtx)
	return l.GetOrderDetailItem(in)
}

// 支付订单
func (s *OrderServiceServer) PayOrder(ctx context.Context, in *order.PayOrderReq) (*order.PayOrderResp, error) {
	l := logic.NewPayOrderLogic(ctx, s.svcCtx)
	return l.PayOrder(in)
}

// 获取订单支付方式
func (s *OrderServiceServer) GetOrderPaymentMethod(ctx context.Context, in *order.GetOrderPaymentMethodReq) (*order.GetOrderPaymentMethodResp, error) {
	l := logic.NewGetOrderPaymentMethodLogic(ctx, s.svcCtx)
	return l.GetOrderPaymentMethod(in)
}

// 订单支付成功后的回调
func (s *OrderServiceServer) FullFillOrder(ctx context.Context, in *order.FullFillOrderReq) (*order.FullFillOrderResp, error) {
	l := logic.NewFullFillOrderLogic(ctx, s.svcCtx)
	return l.FullFillOrder(in)
}
